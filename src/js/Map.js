class Map {
  // prettier-ignore
  MAPS = [
    [
      [14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, ],
      [12, 43, 43, 23, 8, 8, 24, 8, 30, 31, 8, 8, 8, 42, 8, 8, 8, 26, 8, 22, 8, 8, 8, 13, ],
      [12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, ],
      [12, 0, 0, 0, 0, 0, 0, 0, 34, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 13, ],
      [12, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, ],
      [12, 0, 0, 35, 0, 0, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, ],
      [12, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, ],
      [12, 0, 0, 35, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 13, ],
      [12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, ],
      [20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
    ],
    [
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 10, 10, 10, 10, 10, 15, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 43, 43, 41, 43, 43, 22, 43, 43, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 2, 1, 1, 1, 1, 1, 1, 3, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 34, 0, 0, 0, 36, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 9, 9, 9, 12, 4, 0, 0, 0, 0, 36, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 8, 26, 8, 30, 31, 8, 24, 8, 23, 8, 13, 9, 9, 9, 12, 11, 11, 11, 4, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 13, 9, 9, 9, 12, 2, 1, 1, 6, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 35, 0, 0, 35, 0, 34, 0, 36, 5, 13, 9, 9, 9, 12, 4, 0, 44, 0, 0, 0, 35, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 50, 0, 0, 0, 0, 5, 13, 9, 9, 9, 20, 19, 4, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 48, 0, 48, 0, 39, 0, 0, 5, 13, 9, 14, 10, 10, 16, 4, 5, 18, 11, 11, 11, 11, 21, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 12, 8, 8, 8, 4, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [20, 11, 11, 11, 11, 11, 19, 4, 0, 5, 18, 21, 9, 12, 2, 1, 1, 6, 5, 17, 10, 10, 10, 10, 10, 10, 15, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 44, 5, 13, 9, 9, 12, 4, 35, 0, 0, 5, 8, 8, 8, 8, 8, 8, 8, 13, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 0, 5, 13, 9, 9, 20, 11, 11, 19, 4, 7, 1, 1, 1, 1, 1, 1, 3, 13, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 0, 5, 17, 10, 10, 10, 10, 10, 16, 4, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 44, 5, 8, 8, 8, 8, 8, 8, 8, 4, 5, 18, 11, 11, 19, 4, 0, 5, 13, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 0, 7, 1, 1, 1, 1, 1, 1, 1, 6, 5, 13, 9, 14, 16, 4, 45, 5, 17, 10, 10, 10, 10, 15, ],
      [9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 12, 8, 4, 0, 5, 8, 42, 24, 8, 8, 13, ],
      [9, 9, 9, 9, 9, 9, 20, 11, 11, 11, 11, 11, 11, 19, 4, 5, 18, 11, 11, 21, 9, 12, 1, 6, 0, 7, 1, 1, 1, 1, 3, 13, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 5, 13, 9, 9, 9, 9, 12, 0, 0, 40, 0, 40, 0, 40, 0, 5, 13, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 10, 16, 4, 5, 13, 9, 9, 9, 9, 12, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 12, 8, 8, 8, 8, 8, 4, 5, 13, 9, 9, 9, 9, 20, 11, 11, 11, 11, 11, 4, 5, 18, 11, 21, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 12, 2, 1, 1, 1, 1, 6, 5, 13, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 4, 5, 13, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 12, 8, 29, 8, 4, 5, 13, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 5, 18, 11, 11, 11, 11, 21, 9, 9, 9, 9, 9, 9, 12, 1, 1, 1, 6, 5, 13, 9, 9, ],
      [9, 9, 9, 9, 14, 10, 10, 10, 16, 4, 5, 17, 10, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 0, 34, 0, 0, 5, 13, 9, 9, ],
      [9, 9, 9, 9, 12, 43, 41, 43, 43, 4, 5, 8, 8, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 0, 0, 0, 0, 5, 13, 9, 9, ],
      [9, 9, 9, 9, 12, 1, 1, 1, 1, 6, 7, 1, 1, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 20, 11, 11, 11, 11, 11, 21, 9, 9, ],
      [9, 9, 9, 9, 12, 0, 0, 44, 0, 44, 0, 34, 0, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 12, 0, 0, 0, 0, 0, 0, 0, 0, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 20, 11, 11, 11, 11, 11, 11, 11, 11, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
    ],
    [
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 43, 43, 43, 30, 31, 43, 43, 43, 22, 43, 43, 43, 43, 29, 43, 43, 43, 13, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 13, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 50, 0, 0, 34, 0, 50, 0, 36, 50, 50, 0, 0, 50, 50, 0, 5, 13, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 35, 0, 0, 50, 0, 50, 50, 0, 0, 0, 50, 0, 0, 0, 0, 5, 13, 9, ],
      [14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 12, 4, 50, 0, 50, 0, 0, 0, 48, 36, 0, 50, 0, 0, 34, 50, 0, 5, 13, 9, ],
      [12, 8, 26, 8, 30, 31, 8, 24, 8, 23, 8, 13, 12, 4, 50, 0, 0, 44, 0, 0, 50, 0, 0, 0, 44, 0, 0, 0, 50, 5, 13, 9, ],
      [12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 13, 12, 4, 50, 0, 50, 0, 50, 0, 50, 50, 50, 0, 0, 0, 0, 50, 0, 5, 13, 9, ],
      [12, 4, 35, 50, 0, 0, 0, 34, 0, 36, 5, 13, 12, 4, 35, 0, 0, 0, 50, 34, 0, 0, 0, 0, 0, 50, 50, 0, 0, 5, 13, 9, ],
      [12, 4, 0, 0, 0, 50, 44, 0, 0, 0, 5, 13, 20, 11, 11, 11, 19, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 5, 13, 9, ],
      [12, 4, 0, 48, 0, 0, 0, 39, 0, 0, 5, 13, 9, 14, 10, 10, 16, 4, 5, 18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, 9, ],
      [12, 4, 0, 37, 0, 0, 0, 0, 0, 35, 5, 13, 9, 12, 8, 26, 8, 4, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [20, 19, 4, 50, 5, 18, 19, 4, 50, 5, 18, 21, 9, 12, 2, 1, 1, 6, 5, 17, 10, 10, 10, 10, 10, 10, 15, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 44, 5, 13, 12, 4, 44, 5, 13, 9, 9, 12, 4, 34, 35, 0, 5, 8, 8, 8, 8, 8, 8, 8, 13, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 0, 5, 13, 12, 4, 50, 5, 13, 9, 9, 20, 11, 11, 19, 4, 7, 1, 1, 1, 1, 1, 1, 3, 13, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 50, 5, 13, 12, 4, 0, 5, 17, 10, 10, 10, 10, 10, 16, 4, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 0, 5, 13, 12, 4, 44, 5, 8, 26, 8, 8, 8, 26, 8, 4, 5, 18, 11, 11, 19, 4, 0, 5, 13, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 36, 5, 13, 12, 4, 0, 7, 1, 1, 1, 1, 1, 1, 1, 6, 5, 13, 9, 14, 16, 4, 44, 5, 17, 10, 10, 10, 10, 15, ],
      [9, 12, 4, 35, 5, 13, 12, 4, 0, 0, 35, 0, 0, 0, 0, 44, 0, 0, 5, 13, 9, 12, 8, 4, 0, 5, 8, 42, 8, 8, 8, 13, ],
      [9, 12, 4, 44, 5, 13, 20, 11, 11, 11, 11, 11, 11, 19, 4, 0, 0, 18, 11, 13, 9, 12, 1, 6, 0, 7, 1, 1, 1, 1, 3, 13, ],
      [14, 16, 4, 0, 5, 17, 10, 10, 10, 15, 14, 10, 10, 16, 4, 0, 0, 13, 9, 9, 9, 12, 0, 35, 50, 0, 0, 50, 0, 34, 5, 13, ],
      [12, 8, 0, 0, 5, 8, 8, 27, 8, 13, 12, 8, 8, 8, 4, 35, 0, 13, 9, 9, 9, 12, 0, 48, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [12, 2, 0, 0, 7, 1, 1, 1, 3, 13, 12, 2, 1, 1, 6, 44, 0, 13, 9, 9, 9, 20, 11, 11, 11, 11, 11, 4, 5, 18, 11, 21, ],
      [12, 4, 34, 0, 50, 0, 0, 35, 5, 13, 12, 4, 34, 0, 0, 0, 0, 17, 10, 10, 10, 10, 15, 14, 10, 10, 10, 4, 5, 13, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 5, 13, 20, 11, 11, 11, 19, 4, 0, 8, 8, 8, 8, 8, 13, 12, 43, 29, 43, 4, 5, 13, 9, 9, ],
      [20, 19, 4, 44, 5, 18, 11, 11, 11, 21, 9, 9, 9, 9, 12, 4, 0, 1, 1, 1, 1, 3, 13, 12, 1, 1, 1, 6, 5, 13, 9, 9, ],
      [9, 12, 4, 0, 5, 13, 9, 9, 9, 14, 10, 10, 10, 15, 12, 4, 0, 0, 44, 0, 34, 5, 13, 12, 0, 34, 50, 44, 5, 13, 9, 9, ],
      [9, 12, 4, 0, 5, 17, 10, 10, 10, 16, 41, 41, 41, 13, 12, 4, 0, 0, 0, 0, 0, 5, 13, 12, 0, 0, 0, 0, 5, 13, 9, 9, ],
      [9, 12, 4, 0, 5, 43, 43, 43, 43, 43, 2, 1, 3, 13, 12, 4, 0, 0, 50, 0, 0, 5, 13, 20, 11, 11, 11, 11, 11, 21, 9, 9, ],
      [9, 12, 4, 50, 7, 1, 1, 1, 1, 1, 6, 34, 5, 13, 12, 4, 48, 0, 44, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 12, 4, 0, 0, 44, 0, 50, 0, 35, 0, 48, 5, 13, 12, 4, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, 20, 11, 11, 11, 11, 11, 11, 11, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
    ],
    [
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 10, 10, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 12, 28, 29, 24, 28, 29, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, ],
      [12, 43, 23, 43, 43, 43, 30, 31, 43, 43, 43, 43, 13, 12, 2, 1, 1, 1, 3, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 8, 30, 31, 27, 8, 27, 8, 27, 8, 22, 8, 27, 8, 27, 8, 27, 28, 29, 8, 13, ],
      [12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 13, 12, 4, 35, 48, 35, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 13, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 34, 5, 13, 12, 4, 50, 0, 50, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 34, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 34, 5, 13, ],
      [12, 4, 0, 0, 0, 0, 44, 0, 0, 50, 0, 5, 13, 12, 4, 0, 34, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [12, 4, 0, 0, 0, 0, 48, 0, 0, 0, 0, 5, 13, 20, 19, 4, 0, 5, 18, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 50, 0, 5, 17, 10, 16, 4, 44, 5, 17, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 5, 13, ],
      [12, 4, 0, 0, 0, 0, 44, 0, 0, 0, 0, 5, 8, 8, 8, 4, 0, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0, 0, 50, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 48, 5, 13, ],
      [12, 4, 0, 0, 0, 50, 0, 0, 0, 0, 39, 7, 1, 1, 1, 6, 0, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 50, 0, 0, 0, 5, 13, ],
      [12, 4, 35, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 35, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 4, 0, 0, 0, 5, 18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 44, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 4, 34, 0, 50, 0, 0, 50, 0, 0, 35, 0, 0, 0, 0, 50, 0, 0, 34, 5, 13, ],
      [14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16, 4, 0, 0, 0, 5, 17, 10, 10, 10, 15, 9, 9, 9, 9, 9, 9, 9, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, ],
      [12, 8, 8, 8, 27, 8, 8, 8, 27, 8, 8, 8, 27, 8, 4, 0, 0, 0, 5, 8, 8, 27, 8, 13, 9, 9, 9, 9, 9, 9, 9, 20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, ],
      [12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 1, 1, 1, 3, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 44, 0, 0, 0, 0, 34, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 50, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 44, 0, 0, 0, 50, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 35, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 34, 0, 50, 0, 50, 0, 0, 0, 35, 48, 0, 0, 0, 0, 0, 0, 0, 0, 34, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
      [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ],
    ],
  ];

  TILE_SIZE = 32;
  TILESET_GAPSIZE = 4;
  BLOCKED_TILES = [
    8, 9, 10, 11, 12, 13,
    14, 15, 16, 17, 18,
    19, 20, 21, 22, 23,
    24, 25, 26, 27, 28,
    29, 30, 31, 41, 42, 43,
  ];
  MAP_TIMERS = [10, 40, 80, 80, 10, 20, 20];
  START_TILE = 23;
  END_TILE = 22;
  MONSTER_TILE = 50;
  BOSS_TILE = 51;
  tileset;
  context;
  canvas;
  startPos = { x: 0, y: 0 };
  endPos = { col: 0, row: 0 };
  plateCount = 0;
  enemyPos = [];
  bossPos = [];

  constructor(mapNumber) {
    this.tileset = document.getElementById("tileset");
    this.canvas = document.createElement("canvas");
    this.context = this.canvas.getContext("2d");

    this.canvas.width = this.TILE_SIZE * this.MAPS[mapNumber][0].length;
    this.canvas.height = this.TILE_SIZE * this.MAPS[mapNumber].length;

    for (let row = 0; row < this.MAPS[mapNumber].length; row++) {
      for (let col = 0; col < this.MAPS[mapNumber][row].length; col++) {
        let tileIndex = this.MAPS[mapNumber][row][col];
        if (tileIndex == this.START_TILE) this.startPos = { x: col * this.TILE_SIZE, y: (row + 0.5) * this.TILE_SIZE };
        if (tileIndex == this.END_TILE) this.endPos = { col: col, row: row };
        if (tileIndex == 34) this.plateCount++;
        if (tileIndex == this.MONSTER_TILE) this.enemyPos.push({ x: col * this.TILE_SIZE, y: row * this.TILE_SIZE });
        if (tileIndex == this.BOSS_TILE) this.bossPos.push({ x: col * this.TILE_SIZE, y: row * this.TILE_SIZE });
      }
    }
  }

  getPlayerStartPos() {
    return this.startPos;
  }

  getEnemyPositions(){
    return this.enemyPos;
  }
  
  getBossPositions(){
    return this.bossPos;
  }

  renderMapInViewport(mapNumber, playerX, playerY, playerW, playerH) {
    let indexesToRender = this.getIndexesOfTilesToRender(
      mapNumber,
      playerX,
      playerY,
      playerW,
      playerH
    );

    for (let row = indexesToRender.startRow; row < indexesToRender.endRow; row++) {
      for (let col = indexesToRender.startCol; col < indexesToRender.endCol; col++) {
        let tileIndex = this.MAPS[mapNumber][row][col];
        let tilesetRowCol = this.getTilesetRowCol(tileIndex, tileset);

        this.context.drawImage(
          this.tileset,
          tilesetRowCol.x * this.TILE_SIZE +
            this.TILESET_GAPSIZE * tilesetRowCol.x +
            this.TILESET_GAPSIZE / 2,
          tilesetRowCol.y * this.TILE_SIZE +
            this.TILESET_GAPSIZE * tilesetRowCol.y +
            this.TILESET_GAPSIZE / 2,
          this.TILE_SIZE,
          this.TILE_SIZE,
          col * this.TILE_SIZE,
          row * this.TILE_SIZE,
          this.TILE_SIZE,
          this.TILE_SIZE
        );
      }
    }
  }

  getIndexesOfTilesToRender(mapNumber, playerX, playerY, playerW, playerH) {
    let startCol = Math.round((playerX + playerW / 2) / this.TILE_SIZE - 8);
    let endCol = Math.round((playerX + playerW / 2) / this.TILE_SIZE + 8);
    let startRow = Math.round((playerY + playerH / 2) / this.TILE_SIZE - 5);
    let endRow = Math.round((playerY + playerH / 2) / this.TILE_SIZE + 5);

    startCol = clamp(startCol, 0, this.MAPS[mapNumber][0].length);
    endCol = clamp(endCol, 0, this.MAPS[mapNumber][0].length);
    startRow = clamp(startRow, 0, this.MAPS[mapNumber].length);
    endRow = clamp(endRow, 0, this.MAPS[mapNumber].length);

    return { startCol: startCol, endCol: endCol, startRow, startRow, endRow: endRow };
  }

  draw(context, playerX, playerY, playerW, playerH) {
    context.drawImage(
      this.canvas,
      -playerX + context.canvas.width / 2 - playerW / 2,
      -playerY + context.canvas.height / 2 - playerH / 2
    );
  }

  // gibt koordinaten im tilset basierend auf tileindex zurück
  getTilesetRowCol(index, tileset) {
    let tilesPerRow = tileset.width / (this.TILE_SIZE + this.TILESET_GAPSIZE);
    let tileX = index % tilesPerRow;
    let tileY = Math.floor(index / tilesPerRow);
    return { x: tileX, y: tileY };
  }

  replaceTileAtPos(row, col, newTileIndex, mapNumber) {
    this.MAPS[mapNumber][row][col] = newTileIndex;
  }

  replaceAllTilesOfType(oldTileIndex, newTileIndex, mapNumber) {
    for (let row = 0; row < this.MAPS[mapNumber].length; row++) {
      for (let col = 0; col < this.MAPS[mapNumber][row].length; col++) {
        if (this.MAPS[mapNumber][row][col] === oldTileIndex) this.MAPS[mapNumber][row][col] = newTileIndex;
      }
    }
  }
}
